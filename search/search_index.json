{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"to%20do%20/","text":"","title":"To do "},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Sure! Here's a simple solution analyzing how the range of a projectile depends on the angle of projection. Step 1: Define the Range Formula For a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) (assuming launch and landing at the same height), the range \\( R \\) is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] where: \\( v_0 \\) is the initial velocity, \\( g \\) is the acceleration due to gravity (\u2248 9.81 m/s\u00b2), \\( \\theta \\) is the launch angle. Step 2: Analyze the Relationship The function \\( R = \\sin(2\\theta) \\) suggests that the range depends on the sine of twice the angle. The maximum value of \\( \\sin(2\\theta) \\) is 1, which occurs at \\( 2\\theta = 90^\\circ \\) , meaning the maximum range happens at \\( \\theta = 45^\\circ \\) . Step 3: Special Cases \\( \\theta = 0^\\circ \\) or \\( \\theta = 90^\\circ \\) : \\( R = 0 \\) (no horizontal displacement). \\( \\theta = 45^\\circ \\) : Maximum range. Step 4: Visualization (Optional) A simple Python plot using Matplotlib can help visualize the range function: import numpy as np import matplotlib.pyplot as plt g = 9.81 # Gravity (m/s^2) v0 = 10 # Initial velocity (m/s) angles = np.linspace(0, 90, 100) # Angle from 0 to 90 degrees radians = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * radians)) / g # Compute range plt.plot(angles, ranges) plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.grid() plt.show() Conclusion The range is symmetrical around \\( 45^\\circ \\) . The maximum range occurs at \\( 45^\\circ \\) . The function follows a sine wave pattern based on \\( \\sin(2\\theta) \\) . Would you like a more detailed breakdown or a different approach? \ud83d\ude80","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Sure! Here's a simple solution analyzing how the range of a projectile depends on the angle of projection.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-1-define-the-range-formula","text":"For a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) (assuming launch and landing at the same height), the range \\( R \\) is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] where: \\( v_0 \\) is the initial velocity, \\( g \\) is the acceleration due to gravity (\u2248 9.81 m/s\u00b2), \\( \\theta \\) is the launch angle.","title":"Step 1: Define the Range Formula"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-2-analyze-the-relationship","text":"The function \\( R = \\sin(2\\theta) \\) suggests that the range depends on the sine of twice the angle. The maximum value of \\( \\sin(2\\theta) \\) is 1, which occurs at \\( 2\\theta = 90^\\circ \\) , meaning the maximum range happens at \\( \\theta = 45^\\circ \\) .","title":"Step 2: Analyze the Relationship"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-3-special-cases","text":"\\( \\theta = 0^\\circ \\) or \\( \\theta = 90^\\circ \\) : \\( R = 0 \\) (no horizontal displacement). \\( \\theta = 45^\\circ \\) : Maximum range.","title":"Step 3: Special Cases"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-4-visualization-optional","text":"A simple Python plot using Matplotlib can help visualize the range function: import numpy as np import matplotlib.pyplot as plt g = 9.81 # Gravity (m/s^2) v0 = 10 # Initial velocity (m/s) angles = np.linspace(0, 90, 100) # Angle from 0 to 90 degrees radians = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * radians)) / g # Compute range plt.plot(angles, ranges) plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.grid() plt.show()","title":"Step 4: Visualization (Optional)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"The range is symmetrical around \\( 45^\\circ \\) . The maximum range occurs at \\( 45^\\circ \\) . The function follows a sine wave pattern based on \\( \\sin(2\\theta) \\) . Would you like a more detailed breakdown or a different approach? \ud83d\ude80","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfaf Motivation The forced damped pendulum is a classic nonlinear system exhibiting rich behavior\u2014from simple oscillations to chaos. Understanding this system allows us to explore mechanical resonance, nonlinear dynamics, and real-world systems like suspension bridges and electrical circuits. \ud83d\udcd8 1. Theoretical Background Equation of Motion \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \\( \\theta(t) \\) : angle, \\( \\beta \\) : damping coefficient, \\( \\omega_0 \\) : natural frequency, \\( A \\) : driving amplitude, \\( \\omega \\) : driving frequency. Small-Angle Approximation For small \\( \\theta \\) , we use \\( \\sin(\\theta) \\approx \\theta \\) : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] General solution: \\[ \\theta(t) = e^{-\\frac{\\beta}{2}t}C \\cos(\\omega_d t + \\phi) + \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\beta \\omega)^2}} \\cos(\\omega t - \\delta) \\] \ud83d\udd0d 2. Dynamics Analysis Damping \\( \\beta \\) : reduces amplitude over time. Driving amplitude \\( A \\) : larger amplitude increases energy. Driving frequency \\( \\omega \\) : resonance occurs near \\( \\omega_0 \\) . At high amplitudes or specific frequencies, chaos can emerge. \ud83c\udfd7\ufe0f 3. Real-World Applications Suspension bridges \u2014 avoid resonance (e.g., Tacoma Narrows Bridge). Oscillating RLC circuits \u2014 exact analogs of this system. Human biomechanics \u2014 models for walking and limb movement. Energy harvesting \u2014 from vibrations using piezoelectric materials. \ud83d\udcbb 4. Python Simulation Parameters: ```python beta = 0.5 # damping A = 1.2 # driving amplitude omega = 2/3 # driving frequency omega0 = 1.5 # natural frequency ODE Definition & Solver: python Copy Edit import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def pendulum(t, y): theta, omega_theta = y return [omega_theta, -beta * omega_theta - omega0**2 * np.sin(theta) + A * np.cos(omega * t)] y0 = [0.2, 0.0] t_eval = np.linspace(0, 100, 5000) sol = solve_ivp(pendulum, [0, 100], y0, t_eval=t_eval) Plotting Motion: python Copy Edit plt.plot(sol.t, sol.y[0]) plt.title('Angle \u03b8 vs Time') plt.xlabel('Time') plt.ylabel('\u03b8 (rad)') plt.grid(True) plt.show() Phase Portrait: python Copy Edit plt.plot(sol.y[0], sol.y[1]) plt.title('Phase Portrait') plt.xlabel('\u03b8') plt.ylabel('d\u03b8/dt') plt.grid(True) plt.show() Poincar\u00e9 Section: python Copy Edit T_drive = 2 * np.pi / omega sample_times = np.arange(0, 100, T_drive) theta_samples = np.interp(sample_times, sol.t, sol.y[0]) omega_samples = np.interp(sample_times, sol.t, sol.y[1]) plt.scatter(theta_samples, omega_samples, s=2) plt.title('Poincar\u00e9 Section') plt.xlabel('\u03b8') plt.ylabel('d\u03b8/dt') plt.grid(True) plt.show() \ud83d\udcca 5. Interpretation Low amplitude: periodic oscillations. Medium: possible resonance. High: chaotic, unpredictable motion. Poincar\u00e9 sections and phase diagrams visually confirm this. \ud83e\uddea 6. Limitations & Extensions Limitations: Assumes perfect damping and sinusoidal force. Real systems have friction and complex boundaries. Extensions: Add nonlinear damping (e.g., air drag). Use random or aperiodic driving. Plot bifurcation diagrams with changing \ud835\udc34 A. \u2705 Conclusion The forced damped pendulum is a rich, educational system for exploring regular and chaotic motion. This project bridges theory and simulation, providing both conceptual and practical understanding of nonlinear dynamics.","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is a classic nonlinear system exhibiting rich behavior\u2014from simple oscillations to chaos. Understanding this system allows us to explore mechanical resonance, nonlinear dynamics, and real-world systems like suspension bridges and electrical circuits.","title":"\ud83c\udfaf Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-background","text":"","title":"\ud83d\udcd8 1. Theoretical Background"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#equation-of-motion","text":"\\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: \\( \\theta(t) \\) : angle, \\( \\beta \\) : damping coefficient, \\( \\omega_0 \\) : natural frequency, \\( A \\) : driving amplitude, \\( \\omega \\) : driving frequency.","title":"Equation of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\( \\theta \\) , we use \\( \\sin(\\theta) \\approx \\theta \\) : \\[ \\frac{d^2\\theta}{dt^2} + \\beta \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] General solution: \\[ \\theta(t) = e^{-\\frac{\\beta}{2}t}C \\cos(\\omega_d t + \\phi) + \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\beta \\omega)^2}} \\cos(\\omega t - \\delta) \\]","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-dynamics-analysis","text":"Damping \\( \\beta \\) : reduces amplitude over time. Driving amplitude \\( A \\) : larger amplitude increases energy. Driving frequency \\( \\omega \\) : resonance occurs near \\( \\omega_0 \\) . At high amplitudes or specific frequencies, chaos can emerge.","title":"\ud83d\udd0d 2. Dynamics Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-real-world-applications","text":"Suspension bridges \u2014 avoid resonance (e.g., Tacoma Narrows Bridge). Oscillating RLC circuits \u2014 exact analogs of this system. Human biomechanics \u2014 models for walking and limb movement. Energy harvesting \u2014 from vibrations using piezoelectric materials.","title":"\ud83c\udfd7\ufe0f 3. Real-World Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-python-simulation","text":"","title":"\ud83d\udcbb 4. Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"```python beta = 0.5 # damping A = 1.2 # driving amplitude omega = 2/3 # driving frequency omega0 = 1.5 # natural frequency ODE Definition & Solver: python Copy Edit import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp def pendulum(t, y): theta, omega_theta = y return [omega_theta, -beta * omega_theta - omega0**2 * np.sin(theta) + A * np.cos(omega * t)] y0 = [0.2, 0.0] t_eval = np.linspace(0, 100, 5000) sol = solve_ivp(pendulum, [0, 100], y0, t_eval=t_eval) Plotting Motion: python Copy Edit plt.plot(sol.t, sol.y[0]) plt.title('Angle \u03b8 vs Time') plt.xlabel('Time') plt.ylabel('\u03b8 (rad)') plt.grid(True) plt.show() Phase Portrait: python Copy Edit plt.plot(sol.y[0], sol.y[1]) plt.title('Phase Portrait') plt.xlabel('\u03b8') plt.ylabel('d\u03b8/dt') plt.grid(True) plt.show() Poincar\u00e9 Section: python Copy Edit T_drive = 2 * np.pi / omega sample_times = np.arange(0, 100, T_drive) theta_samples = np.interp(sample_times, sol.t, sol.y[0]) omega_samples = np.interp(sample_times, sol.t, sol.y[1]) plt.scatter(theta_samples, omega_samples, s=2) plt.title('Poincar\u00e9 Section') plt.xlabel('\u03b8') plt.ylabel('d\u03b8/dt') plt.grid(True) plt.show() \ud83d\udcca 5. Interpretation Low amplitude: periodic oscillations. Medium: possible resonance. High: chaotic, unpredictable motion. Poincar\u00e9 sections and phase diagrams visually confirm this. \ud83e\uddea 6. Limitations & Extensions Limitations: Assumes perfect damping and sinusoidal force. Real systems have friction and complex boundaries. Extensions: Add nonlinear damping (e.g., air drag). Use random or aperiodic driving. Plot bifurcation diagrams with changing \ud835\udc34 A. \u2705 Conclusion The forced damped pendulum is a rich, educational system for exploring regular and chaotic motion. This project bridges theory and simulation, providing both conceptual and practical understanding of nonlinear dynamics.","title":"Parameters:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Orbital Period and Orbital Radius: Kepler's Third Law in Practice \ud83c\udf0c Motivation Kepler's Third Law reveals the elegant relationship between a planet's orbital period and its distance from the body it orbits. This law provides critical insight into the structure and behavior of planetary systems, allowing astronomers to estimate masses, distances, and even discover exoplanets. It forms a bridge between Newtonian gravity and observed celestial motions. \ud83d\udd0d 1. Derivation: Kepler's Third Law for Circular Orbits Newton's Law of Gravitation: \\(F = \\frac{G M m}{r^2}\\) Centripetal Force for Circular Motion: \\(F = \\frac{m v^2}{r}\\) Equating gravitational force and centripetal force: \\(\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\) \\(v^2 = \\frac{G M}{r}\\) Orbital period \\(T\\) : \\(T = \\frac{2\\pi r}{v} \\Rightarrow v = \\frac{2\\pi r}{T}\\) Substitute into the velocity equation: \\(\\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{G M}{r} \\Rightarrow \\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r}\\) Rearranged: \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\) Final Form (Kepler's Third Law): \\(T^2 \\propto r^3\\) \ud83d\udcad 2. Implications in Astronomy Allows calculation of planetary distances when periods are known. Estimating masses of stars or planets from satellite motion. Used in orbital mechanics to plan space missions. Example: Earth's orbit \\(T = 1\\) year, \\(r = 1\\) AU Any other body in the solar system follows: \\(T^2 / r^3 = 1\\) \ud83c\udf0d 3. Real-World Examples Moon Around Earth: Orbital radius \\(r \\approx 3.84 \\times 10^8\\) m Period \\(T \\approx 27.3\\) days Using Kepler's law, we can estimate Earth's mass or verify the law with actual data. Planets in the Solar System: Planet Radius (AU) Period (Years) T^2 / r^3 Mercury 0.39 0.24 1.01 Venus 0.72 0.62 1.01 Earth 1.00 1.00 1.00 Mars 1.52 1.88 1.01 Jupiter 5.20 11.86 1.00 \ud83d\udcc8 4. Python Simulation of Circular Orbits import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # gravitational constant M = 5.972e24 # mass of Earth (kg) radii = np.linspace(1e7, 5e8, 100) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) plt.plot(radii / 1e6, periods / 3600, label='T vs r (Earth orbit)') plt.xlabel('Orbital Radius (10^6 m)') plt.ylabel('Orbital Period (hours)') plt.title('Orbital Period vs Radius') plt.grid(True) plt.legend() plt.show() Verification of Kepler's Law: T2 = periods**2 r3 = radii**3 plt.plot(r3, T2) plt.xlabel('r^3') plt.ylabel('T^2') plt.title(\"Kepler's Third Law: T^2 vs r^3\") plt.grid(True) plt.show() \ud83d\udd04 5. Extensions to Elliptical Orbits For elliptical orbits, \\(r\\) is replaced by the semi-major axis \\(a\\) . Kepler's Law still holds: \\(T^2 \\propto a^3\\) Applies to comets, asteroids, and binary stars. Used to determine masses of galaxies and detect exoplanets. \u2705 Conclusion Kepler's Third Law elegantly connects time and space for orbiting bodies. From understanding planetary motion to designing satellite systems, the relationship \\(T^2 \\propto r^3\\) is fundamental. Through derivation, application, and simulation, this project confirms the law and shows its profound relevance across astronomy and physics. Implemented in Python 3 using NumPy and Matplotlib for scientific visualization.","title":"Orbital Period and Orbital Radius: Kepler's Third Law in Practice"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius-keplers-third-law-in-practice","text":"","title":"Orbital Period and Orbital Radius: Kepler's Third Law in Practice"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law reveals the elegant relationship between a planet's orbital period and its distance from the body it orbits. This law provides critical insight into the structure and behavior of planetary systems, allowing astronomers to estimate masses, distances, and even discover exoplanets. It forms a bridge between Newtonian gravity and observed celestial motions.","title":"\ud83c\udf0c Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-derivation-keplers-third-law-for-circular-orbits","text":"","title":"\ud83d\udd0d 1. Derivation: Kepler's Third Law for Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#newtons-law-of-gravitation","text":"\\(F = \\frac{G M m}{r^2}\\)","title":"Newton's Law of Gravitation:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#centripetal-force-for-circular-motion","text":"\\(F = \\frac{m v^2}{r}\\) Equating gravitational force and centripetal force: \\(\\frac{G M m}{r^2} = \\frac{m v^2}{r}\\) \\(v^2 = \\frac{G M}{r}\\) Orbital period \\(T\\) : \\(T = \\frac{2\\pi r}{v} \\Rightarrow v = \\frac{2\\pi r}{T}\\) Substitute into the velocity equation: \\(\\left( \\frac{2\\pi r}{T} \\right)^2 = \\frac{G M}{r} \\Rightarrow \\frac{4\\pi^2 r^2}{T^2} = \\frac{G M}{r}\\) Rearranged: \\(T^2 = \\frac{4\\pi^2}{G M} r^3\\)","title":"Centripetal Force for Circular Motion:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#final-form-keplers-third-law","text":"\\(T^2 \\propto r^3\\)","title":"Final Form (Kepler's Third Law):"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-implications-in-astronomy","text":"Allows calculation of planetary distances when periods are known. Estimating masses of stars or planets from satellite motion. Used in orbital mechanics to plan space missions. Example: Earth's orbit \\(T = 1\\) year, \\(r = 1\\) AU Any other body in the solar system follows: \\(T^2 / r^3 = 1\\)","title":"\ud83d\udcad 2. Implications in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-examples","text":"","title":"\ud83c\udf0d 3. Real-World Examples"},{"location":"1%20Physics/2%20Gravity/Problem_1/#moon-around-earth","text":"Orbital radius \\(r \\approx 3.84 \\times 10^8\\) m Period \\(T \\approx 27.3\\) days Using Kepler's law, we can estimate Earth's mass or verify the law with actual data.","title":"Moon Around Earth:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#planets-in-the-solar-system","text":"Planet Radius (AU) Period (Years) T^2 / r^3 Mercury 0.39 0.24 1.01 Venus 0.72 0.62 1.01 Earth 1.00 1.00 1.00 Mars 1.52 1.88 1.01 Jupiter 5.20 11.86 1.00","title":"Planets in the Solar System:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-python-simulation-of-circular-orbits","text":"import numpy as np import matplotlib.pyplot as plt G = 6.67430e-11 # gravitational constant M = 5.972e24 # mass of Earth (kg) radii = np.linspace(1e7, 5e8, 100) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) plt.plot(radii / 1e6, periods / 3600, label='T vs r (Earth orbit)') plt.xlabel('Orbital Radius (10^6 m)') plt.ylabel('Orbital Period (hours)') plt.title('Orbital Period vs Radius') plt.grid(True) plt.legend() plt.show()","title":"\ud83d\udcc8 4. Python Simulation of Circular Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#verification-of-keplers-law","text":"T2 = periods**2 r3 = radii**3 plt.plot(r3, T2) plt.xlabel('r^3') plt.ylabel('T^2') plt.title(\"Kepler's Third Law: T^2 vs r^3\") plt.grid(True) plt.show()","title":"Verification of Kepler's Law:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-extensions-to-elliptical-orbits","text":"For elliptical orbits, \\(r\\) is replaced by the semi-major axis \\(a\\) . Kepler's Law still holds: \\(T^2 \\propto a^3\\) Applies to comets, asteroids, and binary stars. Used to determine masses of galaxies and detect exoplanets.","title":"\ud83d\udd04 5. Extensions to Elliptical Orbits"},{"location":"1%20Physics/2%20Gravity/Problem_1/#conclusion","text":"Kepler's Third Law elegantly connects time and space for orbiting bodies. From understanding planetary motion to designing satellite systems, the relationship \\(T^2 \\propto r^3\\) is fundamental. Through derivation, application, and simulation, this project confirms the law and shows its profound relevance across astronomy and physics. Implemented in Python 3 using NumPy and Matplotlib for scientific visualization.","title":"\u2705 Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Escape Velocities and Cosmic Velocities \ud83d\ude80 Motivation Escape velocity is fundamental for understanding how an object can break free from a celestial body's gravitational pull. Extending this concept, the first , second , and third cosmic velocities define the speeds needed to achieve low orbit, escape a planet entirely, or even leave a star system. These concepts are critical in space exploration, from satellite launches to interstellar travel. 1. Definitions and Physical Meaning First cosmic velocity ( \\(v_1\\) ) \u2014 the minimum speed needed for an object to maintain a stable circular orbit just above the surface of a celestial body. Second cosmic velocity ( \\(v_2\\) ) \u2014 the minimum speed to escape the gravitational field of the celestial body (escape velocity). Third cosmic velocity ( \\(v_3\\) ) \u2014 the minimum speed required to escape the gravitational influence of the star system (e.g., the Solar System). 2. Mathematical Derivations First Cosmic Velocity ( \\(v_1\\) ) Derived from equating centripetal force and gravitational force for a circular orbit of radius \\(r\\) (usually the radius of the planet): \\[ v_1 = \\sqrt{\\frac{G M}{r}} \\] Where: \\(G\\) \u2014 gravitational constant, \\(M\\) \u2014 mass of the celestial body, \\(r\\) \u2014 radius from the center of the body. Second Cosmic Velocity ( \\(v_2\\) ) \u2014 Escape Velocity Energy needed to reach infinity with zero kinetic energy: \\[ \\frac{1}{2} m v_2^2 = \\frac{G M m}{r} \\implies v_2 = \\sqrt{\\frac{2 G M}{r}} = \\sqrt{2} v_1 \\] Third Cosmic Velocity ( \\(v_3\\) ) \u2014 Solar System Escape Velocity Roughly the velocity needed to escape the Sun\u2019s gravitational influence from Earth's orbit, calculated as: \\[ v_3 = \\sqrt{v_2^2 + v_{\\text{Earth orbit}}^2} \\] Where: \\(v_2\\) \u2014 escape velocity from Earth, \\(v_{\\text{Earth orbit}} \\approx 29.78\\) km/s is Earth's orbital speed around the Sun. 3. Calculations for Different Celestial Bodies Body Mass (kg) Radius (m) \\(v_1\\) (km/s) \\(v_2\\) (km/s) Notes Earth \\(5.972 \\times 10^{24}\\) \\(6.371 \\times 10^{6}\\) 7.9 11.2 First and second cosmic velocities Mars \\(6.39 \\times 10^{23}\\) \\(3.389 \\times 10^{6}\\) 3.6 5.0 Lower escape velocities Jupiter \\(1.898 \\times 10^{27}\\) \\(6.9911 \\times 10^{7}\\) 42.1 59.5 Giant planet, very high velocities 4. Python Simulation & Visualization ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # gravitational constant, m^3/kg/s^2 Celestial bodies data bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6}, 'Mars': {'mass': 6.39e23, 'radius': 3.389e6}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.9911e7} } v1_list = [] v2_list = [] names = [] for name, data in bodies.items(): M = data['mass'] r = data['radius'] v1 = np.sqrt(G * M / r) / 1000 # convert to km/s v2 = np.sqrt(2) * v1 v1_list.append(v1) v2_list.append(v2) names.append(name) Plotting x = np.arange(len(names)) width = 0.35 fig, ax = plt.subplots() rects1 = ax.bar(x - width/2, v1_list, width, label='First Cosmic Velocity (v1)') rects2 = ax.bar(x + width/2, v2_list, width, label='Second Cosmic Velocity (v2)') ax.set_ylabel('Velocity (km/s)') ax.set_title('Cosmic Velocities for Different Celestial Bodies') ax.set_xticks(x) ax.set_xticklabels(names) ax.legend() ax.grid(True) plt.show()","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"Escape velocity is fundamental for understanding how an object can break free from a celestial body's gravitational pull. Extending this concept, the first , second , and third cosmic velocities define the speeds needed to achieve low orbit, escape a planet entirely, or even leave a star system. These concepts are critical in space exploration, from satellite launches to interstellar travel.","title":"\ud83d\ude80 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-definitions-and-physical-meaning","text":"First cosmic velocity ( \\(v_1\\) ) \u2014 the minimum speed needed for an object to maintain a stable circular orbit just above the surface of a celestial body. Second cosmic velocity ( \\(v_2\\) ) \u2014 the minimum speed to escape the gravitational field of the celestial body (escape velocity). Third cosmic velocity ( \\(v_3\\) ) \u2014 the minimum speed required to escape the gravitational influence of the star system (e.g., the Solar System).","title":"1. Definitions and Physical Meaning"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-mathematical-derivations","text":"","title":"2. Mathematical Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#first-cosmic-velocity-v_1","text":"Derived from equating centripetal force and gravitational force for a circular orbit of radius \\(r\\) (usually the radius of the planet): \\[ v_1 = \\sqrt{\\frac{G M}{r}} \\] Where: \\(G\\) \u2014 gravitational constant, \\(M\\) \u2014 mass of the celestial body, \\(r\\) \u2014 radius from the center of the body.","title":"First Cosmic Velocity (\\(v_1\\))"},{"location":"1%20Physics/2%20Gravity/Problem_2/#second-cosmic-velocity-v_2-escape-velocity","text":"Energy needed to reach infinity with zero kinetic energy: \\[ \\frac{1}{2} m v_2^2 = \\frac{G M m}{r} \\implies v_2 = \\sqrt{\\frac{2 G M}{r}} = \\sqrt{2} v_1 \\]","title":"Second Cosmic Velocity (\\(v_2\\)) \u2014 Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#third-cosmic-velocity-v_3-solar-system-escape-velocity","text":"Roughly the velocity needed to escape the Sun\u2019s gravitational influence from Earth's orbit, calculated as: \\[ v_3 = \\sqrt{v_2^2 + v_{\\text{Earth orbit}}^2} \\] Where: \\(v_2\\) \u2014 escape velocity from Earth, \\(v_{\\text{Earth orbit}} \\approx 29.78\\) km/s is Earth's orbital speed around the Sun.","title":"Third Cosmic Velocity (\\(v_3\\)) \u2014 Solar System Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-calculations-for-different-celestial-bodies","text":"Body Mass (kg) Radius (m) \\(v_1\\) (km/s) \\(v_2\\) (km/s) Notes Earth \\(5.972 \\times 10^{24}\\) \\(6.371 \\times 10^{6}\\) 7.9 11.2 First and second cosmic velocities Mars \\(6.39 \\times 10^{23}\\) \\(3.389 \\times 10^{6}\\) 3.6 5.0 Lower escape velocities Jupiter \\(1.898 \\times 10^{27}\\) \\(6.9911 \\times 10^{7}\\) 42.1 59.5 Giant planet, very high velocities","title":"3. Calculations for Different Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-python-simulation-visualization","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"4. Python Simulation &amp; Visualization"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.67430e-11 # gravitational constant, m^3/kg/s^2","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-bodies-data","text":"bodies = { 'Earth': {'mass': 5.972e24, 'radius': 6.371e6}, 'Mars': {'mass': 6.39e23, 'radius': 3.389e6}, 'Jupiter': {'mass': 1.898e27, 'radius': 6.9911e7} } v1_list = [] v2_list = [] names = [] for name, data in bodies.items(): M = data['mass'] r = data['radius'] v1 = np.sqrt(G * M / r) / 1000 # convert to km/s v2 = np.sqrt(2) * v1 v1_list.append(v1) v2_list.append(v2) names.append(name)","title":"Celestial bodies data"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plotting","text":"x = np.arange(len(names)) width = 0.35 fig, ax = plt.subplots() rects1 = ax.bar(x - width/2, v1_list, width, label='First Cosmic Velocity (v1)') rects2 = ax.bar(x + width/2, v2_list, width, label='Second Cosmic Velocity (v2)') ax.set_ylabel('Velocity (km/s)') ax.set_title('Cosmic Velocities for Different Celestial Bodies') ax.set_xticks(x) ax.set_xticklabels(names) ax.legend() ax.grid(True) plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Trajectories of a Freely Released Payload Near Earth \ud83d\ude80 Motivation When an object is released from a moving rocket near Earth, its trajectory depends critically on the initial conditions (position, velocity, altitude) and Earth's gravity. The resulting motion can be elliptical (orbit), parabolic (escape trajectory), or hyperbolic (escape with excess velocity). Understanding these trajectories is essential for space missions, including satellite deployment, orbital insertion, and reentry planning. 1. Theoretical Background Newton\u2019s Law of Universal Gravitation The gravitational force acting on the payload of mass \\(m\\) at position vector \\(\\mathbf{r}\\) relative to Earth's center is: \\[ \\mathbf{F} = -\\frac{G M_e m}{r^3} \\mathbf{r} \\] Where: \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3\\text{kg}^{-1}\\text{s}^{-2}\\) \u2014 gravitational constant, \\(M_e = 5.972 \\times 10^{24} \\, \\text{kg}\\) \u2014 Earth's mass, \\(r = |\\mathbf{r}|\\) \u2014 distance from Earth's center. Equation of Motion Using Newton's second law: \\[ m \\mathbf{\\ddot{r}} = \\mathbf{F} \\implies \\mathbf{\\ddot{r}} = -\\frac{G M_e}{r^3} \\mathbf{r} \\] This second-order vector differential equation governs the motion of the payload. 2. Types of Trajectories The nature of the orbit depends on the total mechanical energy \\(E\\) : \\[ E = \\frac{1}{2} m v^2 - \\frac{G M_e m}{r} \\] Elliptical Orbit: \\(E < 0\\) \u2014 payload is gravitationally bound. Parabolic Trajectory: \\(E = 0\\) \u2014 payload reaches escape velocity. Hyperbolic Trajectory: \\(E > 0\\) \u2014 payload escapes with excess kinetic energy. 3. Numerical Simulation Approach We will: Use the initial position and velocity of the payload relative to Earth's center. Numerically integrate the equations of motion using the 4th order Runge-Kutta method via scipy.integrate.solve_ivp . Simulate the trajectory over a given time span. Visualize trajectories in 2D for clarity. 4. Python Implementation ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Constants G = 6.67430e-11 # gravitational constant, m^3/kg/s^2 M_e = 5.972e24 # Earth mass, kg R_e = 6.371e6 # Earth radius, m def equations(t, y): # y = [x, y, vx, vy] rx, ry, vx, vy = y r = np.sqrt(rx 2 + ry 2) ax = -G * M_e * rx / r**3 ay = -G * M_e * ry / r**3 return [vx, vy, ax, ay] Initial conditions Example: Payload released from 400 km altitude with initial velocity altitude = 400e3 # 400 km above Earth's surface initial_speed = 7800 # approx low Earth orbit speed in m/s Initial position (x, y) x0 = R_e + altitude y0 = 0.0 Initial velocity (vx, vy) vx0 = 0.0 vy0 = initial_speed Initial state vector y0_vec = [x0, y0, vx0, vy0] Time span for simulation (seconds) t_span = (0, 6000) # simulate for 6000 seconds (~1.67 hours) t_eval = np.linspace(*t_span, 5000) Solve ODE using Runge-Kutta method sol = solve_ivp(equations, t_span, y0_vec, t_eval=t_eval, rtol=1e-9, atol=1e-9) Extract solution x = sol.y[0] y = sol.y[1] Earth outline for reference theta = np.linspace(0, 2*np.pi, 100) earth_x = R_e * np.cos(theta) earth_y = R_e * np.sin(theta) Plot trajectory and Earth plt.figure(figsize=(8,8)) plt.plot(earth_x, earth_y, 'b', label='Earth') plt.plot(x, y, 'r', label='Payload trajectory') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Trajectory of Payload Released Near Earth') plt.axis('equal') plt.grid(True) plt.legend() plt.show()","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#trajectories-of-a-freely-released-payload-near-earth","text":"","title":"Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#motivation","text":"When an object is released from a moving rocket near Earth, its trajectory depends critically on the initial conditions (position, velocity, altitude) and Earth's gravity. The resulting motion can be elliptical (orbit), parabolic (escape trajectory), or hyperbolic (escape with excess velocity). Understanding these trajectories is essential for space missions, including satellite deployment, orbital insertion, and reentry planning.","title":"\ud83d\ude80 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#1-theoretical-background","text":"","title":"1. Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_3/#newtons-law-of-universal-gravitation","text":"The gravitational force acting on the payload of mass \\(m\\) at position vector \\(\\mathbf{r}\\) relative to Earth's center is: \\[ \\mathbf{F} = -\\frac{G M_e m}{r^3} \\mathbf{r} \\] Where: \\(G = 6.67430 \\times 10^{-11} \\, \\text{m}^3\\text{kg}^{-1}\\text{s}^{-2}\\) \u2014 gravitational constant, \\(M_e = 5.972 \\times 10^{24} \\, \\text{kg}\\) \u2014 Earth's mass, \\(r = |\\mathbf{r}|\\) \u2014 distance from Earth's center.","title":"Newton\u2019s Law of Universal Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#equation-of-motion","text":"Using Newton's second law: \\[ m \\mathbf{\\ddot{r}} = \\mathbf{F} \\implies \\mathbf{\\ddot{r}} = -\\frac{G M_e}{r^3} \\mathbf{r} \\] This second-order vector differential equation governs the motion of the payload.","title":"Equation of Motion"},{"location":"1%20Physics/2%20Gravity/Problem_3/#2-types-of-trajectories","text":"The nature of the orbit depends on the total mechanical energy \\(E\\) : \\[ E = \\frac{1}{2} m v^2 - \\frac{G M_e m}{r} \\] Elliptical Orbit: \\(E < 0\\) \u2014 payload is gravitationally bound. Parabolic Trajectory: \\(E = 0\\) \u2014 payload reaches escape velocity. Hyperbolic Trajectory: \\(E > 0\\) \u2014 payload escapes with excess kinetic energy.","title":"2. Types of Trajectories"},{"location":"1%20Physics/2%20Gravity/Problem_3/#3-numerical-simulation-approach","text":"We will: Use the initial position and velocity of the payload relative to Earth's center. Numerically integrate the equations of motion using the 4th order Runge-Kutta method via scipy.integrate.solve_ivp . Simulate the trajectory over a given time span. Visualize trajectories in 2D for clarity.","title":"3. Numerical Simulation Approach"},{"location":"1%20Physics/2%20Gravity/Problem_3/#4-python-implementation","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"4. Python Implementation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.67430e-11 # gravitational constant, m^3/kg/s^2 M_e = 5.972e24 # Earth mass, kg R_e = 6.371e6 # Earth radius, m def equations(t, y): # y = [x, y, vx, vy] rx, ry, vx, vy = y r = np.sqrt(rx 2 + ry 2) ax = -G * M_e * rx / r**3 ay = -G * M_e * ry / r**3 return [vx, vy, ax, ay]","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#example-payload-released-from-400-km-altitude-with-initial-velocity","text":"altitude = 400e3 # 400 km above Earth's surface initial_speed = 7800 # approx low Earth orbit speed in m/s","title":"Example: Payload released from 400 km altitude with initial velocity"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-position-x-y","text":"x0 = R_e + altitude y0 = 0.0","title":"Initial position (x, y)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-velocity-vx-vy","text":"vx0 = 0.0 vy0 = initial_speed","title":"Initial velocity (vx, vy)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-state-vector","text":"y0_vec = [x0, y0, vx0, vy0]","title":"Initial state vector"},{"location":"1%20Physics/2%20Gravity/Problem_3/#time-span-for-simulation-seconds","text":"t_span = (0, 6000) # simulate for 6000 seconds (~1.67 hours) t_eval = np.linspace(*t_span, 5000)","title":"Time span for simulation (seconds)"},{"location":"1%20Physics/2%20Gravity/Problem_3/#solve-ode-using-runge-kutta-method","text":"sol = solve_ivp(equations, t_span, y0_vec, t_eval=t_eval, rtol=1e-9, atol=1e-9)","title":"Solve ODE using Runge-Kutta method"},{"location":"1%20Physics/2%20Gravity/Problem_3/#extract-solution","text":"x = sol.y[0] y = sol.y[1]","title":"Extract solution"},{"location":"1%20Physics/2%20Gravity/Problem_3/#earth-outline-for-reference","text":"theta = np.linspace(0, 2*np.pi, 100) earth_x = R_e * np.cos(theta) earth_y = R_e * np.sin(theta)","title":"Earth outline for reference"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plot-trajectory-and-earth","text":"plt.figure(figsize=(8,8)) plt.plot(earth_x, earth_y, 'b', label='Earth') plt.plot(x, y, 'r', label='Payload trajectory') plt.xlabel('x (m)') plt.ylabel('y (m)') plt.title('Trajectory of Payload Released Near Earth') plt.axis('equal') plt.grid(True) plt.legend() plt.show()","title":"Plot trajectory and Earth"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"\ud83c\udf0a Interference Patterns on a Water Surface Motivation Interference patterns provide a vivid, intuitive view of wave behavior. On a water surface, these patterns arise when waves from different sources overlap. The resulting pattern reveals how waves interact constructively or destructively depending on their relative phases and distances. This simple yet powerful model helps us grasp key concepts of wave physics. \ud83d\udd27 Problem Setup Regular Polygon Selection We choose a regular pentagon (5-sided polygon) for placing our wave sources. Parameters Amplitude (A): 1.0 Wavelength (\u03bb): 1.0 unit Frequency (f): 1.0 Hz Wave number (k): \\( k = \\frac{2\\pi}{\\lambda} \\) Angular frequency (\u03c9): \\( \\omega = 2\\pi f \\) Phase (\u03d5): 0 (coherent sources) \ud83e\uddee Wave Equation For a single source at location \\(\\vec{r}_i = (x_i, y_i)\\) , the wave displacement at point \\(\\vec{r} = (x, y)\\) and time \\(t\\) is: \\[ \\psi_i(x, y, t) = A \\cdot \\cos(k d_i - \\omega t + \\phi) \\] where: - \\(d_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) The total wave displacement from all sources is: \\[ \\Psi(x, y, t) = \\sum_{i=1}^{N} \\psi_i(x, y, t) \\] \ud83e\uddd1\u200d\ud83d\udcbb Python Simulation Code import numpy as np import matplotlib.pyplot as plt # Parameters A = 1.0 wavelength = 1.0 k = 2 * np.pi / wavelength f = 1.0 omega = 2 * np.pi * f phi = 0 N_sources = 5 # regular pentagon # Time snapshot t = 0.0 # Grid x = np.linspace(-5, 5, 500) y = np.linspace(-5, 5, 500) X, Y = np.meshgrid(x, y) # Position sources at vertices of a regular pentagon radius = 2.0 angles = np.linspace(0, 2*np.pi, N_sources, endpoint=False) source_positions = [(radius * np.cos(a), radius * np.sin(a)) for a in angles] # Superpose waves from all sources Z = np.zeros_like(X) for (x0, y0) in source_positions: R = np.sqrt((X - x0)**2 + (Y - y0)**2) Z += A * np.cos(k * R - omega * t + phi) # Visualization plt.figure(figsize=(8, 6)) plt.contourf(X, Y, Z, levels=100, cmap='viridis') plt.colorbar(label='Wave Displacement') plt.scatter(*zip(*source_positions), color='red', label='Sources') plt.title('Interference Pattern from 5 Point Sources (Pentagon)') plt.xlabel('x') plt.ylabel('y') plt.legend() plt.axis('equal') plt.show() \ud83d\udd0d Analysis of Interference Patterns Constructive Interference Occurs where the waves from all sources arrive in phase \u2014 seen as bright (high-displacement) fringes. Destructive Interference Occurs where the waves are out of phase \u2014 seen as dark (low-displacement) regions. Symmetry Observed The pattern has pentagonal symmetry , reflecting the geometry of the source configuration. Regions of symmetry correspond to central lines between source pairs. \ud83d\udcc8 Conclusion This simulation of interference patterns from point sources arranged in a regular pentagon reveals: - Radial and angular symmetries matching the source geometry. - Rich, periodic structures caused by constructive and destructive interference. - A powerful way to explore wave superposition , using a visually intuitive and computationally accessible method.","title":"\ud83c\udf0a Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#interference-patterns-on-a-water-surface","text":"","title":"\ud83c\udf0a Interference Patterns on a Water Surface"},{"location":"1%20Physics/3%20Waves/Problem_1/#motivation","text":"Interference patterns provide a vivid, intuitive view of wave behavior. On a water surface, these patterns arise when waves from different sources overlap. The resulting pattern reveals how waves interact constructively or destructively depending on their relative phases and distances. This simple yet powerful model helps us grasp key concepts of wave physics.","title":"Motivation"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-setup","text":"","title":"\ud83d\udd27 Problem Setup"},{"location":"1%20Physics/3%20Waves/Problem_1/#regular-polygon-selection","text":"We choose a regular pentagon (5-sided polygon) for placing our wave sources.","title":"Regular Polygon Selection"},{"location":"1%20Physics/3%20Waves/Problem_1/#parameters","text":"Amplitude (A): 1.0 Wavelength (\u03bb): 1.0 unit Frequency (f): 1.0 Hz Wave number (k): \\( k = \\frac{2\\pi}{\\lambda} \\) Angular frequency (\u03c9): \\( \\omega = 2\\pi f \\) Phase (\u03d5): 0 (coherent sources)","title":"Parameters"},{"location":"1%20Physics/3%20Waves/Problem_1/#wave-equation","text":"For a single source at location \\(\\vec{r}_i = (x_i, y_i)\\) , the wave displacement at point \\(\\vec{r} = (x, y)\\) and time \\(t\\) is: \\[ \\psi_i(x, y, t) = A \\cdot \\cos(k d_i - \\omega t + \\phi) \\] where: - \\(d_i = \\sqrt{(x - x_i)^2 + (y - y_i)^2}\\) The total wave displacement from all sources is: \\[ \\Psi(x, y, t) = \\sum_{i=1}^{N} \\psi_i(x, y, t) \\]","title":"\ud83e\uddee Wave Equation"},{"location":"1%20Physics/3%20Waves/Problem_1/#python-simulation-code","text":"import numpy as np import matplotlib.pyplot as plt # Parameters A = 1.0 wavelength = 1.0 k = 2 * np.pi / wavelength f = 1.0 omega = 2 * np.pi * f phi = 0 N_sources = 5 # regular pentagon # Time snapshot t = 0.0 # Grid x = np.linspace(-5, 5, 500) y = np.linspace(-5, 5, 500) X, Y = np.meshgrid(x, y) # Position sources at vertices of a regular pentagon radius = 2.0 angles = np.linspace(0, 2*np.pi, N_sources, endpoint=False) source_positions = [(radius * np.cos(a), radius * np.sin(a)) for a in angles] # Superpose waves from all sources Z = np.zeros_like(X) for (x0, y0) in source_positions: R = np.sqrt((X - x0)**2 + (Y - y0)**2) Z += A * np.cos(k * R - omega * t + phi) # Visualization plt.figure(figsize=(8, 6)) plt.contourf(X, Y, Z, levels=100, cmap='viridis') plt.colorbar(label='Wave Displacement') plt.scatter(*zip(*source_positions), color='red', label='Sources') plt.title('Interference Pattern from 5 Point Sources (Pentagon)') plt.xlabel('x') plt.ylabel('y') plt.legend() plt.axis('equal') plt.show()","title":"\ud83e\uddd1\u200d\ud83d\udcbb Python Simulation Code"},{"location":"1%20Physics/3%20Waves/Problem_1/#analysis-of-interference-patterns","text":"","title":"\ud83d\udd0d Analysis of Interference Patterns"},{"location":"1%20Physics/3%20Waves/Problem_1/#constructive-interference","text":"Occurs where the waves from all sources arrive in phase \u2014 seen as bright (high-displacement) fringes.","title":"Constructive Interference"},{"location":"1%20Physics/3%20Waves/Problem_1/#destructive-interference","text":"Occurs where the waves are out of phase \u2014 seen as dark (low-displacement) regions.","title":"Destructive Interference"},{"location":"1%20Physics/3%20Waves/Problem_1/#symmetry-observed","text":"The pattern has pentagonal symmetry , reflecting the geometry of the source configuration. Regions of symmetry correspond to central lines between source pairs.","title":"Symmetry Observed"},{"location":"1%20Physics/3%20Waves/Problem_1/#conclusion","text":"This simulation of interference patterns from point sources arranged in a regular pentagon reveals: - Radial and angular symmetries matching the source geometry. - Rich, periodic structures caused by constructive and destructive interference. - A powerful way to explore wave superposition , using a visually intuitive and computationally accessible method.","title":"\ud83d\udcc8 Conclusion"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}