{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Sure! Here's a simple solution analyzing how the range of a projectile depends on the angle of projection. Step 1: Define the Range Formula For a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) (assuming launch and landing at the same height), the range \\( R \\) is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] where: \\( v_0 \\) is the initial velocity, \\( g \\) is the acceleration due to gravity (\u2248 9.81 m/s\u00b2), \\( \\theta \\) is the launch angle. Step 2: Analyze the Relationship The function \\( R = \\sin(2\\theta) \\) suggests that the range depends on the sine of twice the angle. The maximum value of \\( \\sin(2\\theta) \\) is 1, which occurs at \\( 2\\theta = 90^\\circ \\) , meaning the maximum range happens at \\( \\theta = 45^\\circ \\) . Step 3: Special Cases \\( \\theta = 0^\\circ \\) or \\( \\theta = 90^\\circ \\) : \\( R = 0 \\) (no horizontal displacement). \\( \\theta = 45^\\circ \\) : Maximum range. Step 4: Visualization (Optional) A simple Python plot using Matplotlib can help visualize the range function: import numpy as np import matplotlib.pyplot as plt g = 9.81 # Gravity (m/s^2) v0 = 10 # Initial velocity (m/s) angles = np.linspace(0, 90, 100) # Angle from 0 to 90 degrees radians = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * radians)) / g # Compute range plt.plot(angles, ranges) plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.grid() plt.show() Conclusion The range is symmetrical around \\( 45^\\circ \\) . The maximum range occurs at \\( 45^\\circ \\) . The function follows a sine wave pattern based on \\( \\sin(2\\theta) \\) . Would you like a more detailed breakdown or a different approach? \ud83d\ude80","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Sure! Here's a simple solution analyzing how the range of a projectile depends on the angle of projection.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-1-define-the-range-formula","text":"For a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) (assuming launch and landing at the same height), the range \\( R \\) is given by: \\[ R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\] where: \\( v_0 \\) is the initial velocity, \\( g \\) is the acceleration due to gravity (\u2248 9.81 m/s\u00b2), \\( \\theta \\) is the launch angle.","title":"Step 1: Define the Range Formula"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-2-analyze-the-relationship","text":"The function \\( R = \\sin(2\\theta) \\) suggests that the range depends on the sine of twice the angle. The maximum value of \\( \\sin(2\\theta) \\) is 1, which occurs at \\( 2\\theta = 90^\\circ \\) , meaning the maximum range happens at \\( \\theta = 45^\\circ \\) .","title":"Step 2: Analyze the Relationship"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-3-special-cases","text":"\\( \\theta = 0^\\circ \\) or \\( \\theta = 90^\\circ \\) : \\( R = 0 \\) (no horizontal displacement). \\( \\theta = 45^\\circ \\) : Maximum range.","title":"Step 3: Special Cases"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-4-visualization-optional","text":"A simple Python plot using Matplotlib can help visualize the range function: import numpy as np import matplotlib.pyplot as plt g = 9.81 # Gravity (m/s^2) v0 = 10 # Initial velocity (m/s) angles = np.linspace(0, 90, 100) # Angle from 0 to 90 degrees radians = np.radians(angles) # Convert to radians ranges = (v0**2 * np.sin(2 * radians)) / g # Compute range plt.plot(angles, ranges) plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle\") plt.grid() plt.show()","title":"Step 4: Visualization (Optional)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"The range is symmetrical around \\( 45^\\circ \\) . The maximum range occurs at \\( 45^\\circ \\) . The function follows a sine wave pattern based on \\( \\sin(2\\theta) \\) . Would you like a more detailed breakdown or a different approach? \ud83d\ude80","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \ud83c\udf00 Investigation of the Dynamics of a Forced Damped Pendulum \ud83d\udcda Theoretical Foundation The equation of motion for a pendulum with damping and an external force is given by: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles: [ \\sin(\\theta) \\approx \\theta ] This allows the analysis of damped harmonic oscillations , resonance , and even chaos by varying parameters. \ud83e\uddea Python Model of the Pendulum A numerical solution is obtained using the Runge-Kutta method (4th order) from the scipy.integrate.solve_ivp package. Model parameters: - \u03b3 (damping): 0.1 - \u03c9\u2080 (natural frequency): 1.5 - A (amplitude of the external force): 1.2 - \u03c9 (driving frequency): 2.0 Code can be found in the repository or below upon request. \ud83d\udcca Visualization of Results 1\ufe0f\u20e3 Angle vs Time 2\ufe0f\u20e3 Phase Portrait (\u03b8 vs \u03c9 \u2014 shows the system's behavior in the state space) 3\ufe0f\u20e3 Poincar\u00e9 Section (Sampling the position and velocity of the pendulum at certain moments \u2014 a fractal structure appears when chaos emerges) \ud83d\udccc Conclusions The system demonstrates various motion regimes : regular, quasiperiodic, and chaotic. Under certain conditions, resonance occurs, increasing the amplitude. When changing parameters, chaos appears \u2014 an example of complex nonlinear dynamics. \u2699\ufe0f Applications This model can be applied in: - engineering (vibrations, damping), - electronics (RLC circuits), - biomechanics (modeling rhythmic patterns), - energy harvesting (smoothing oscillations). \ud83d\udee0 Tools Python 3 NumPy , SciPy , Matplotlib Visual Studio Code Git, GitHub Pages","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigation-of-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\ud83c\udf00 Investigation of the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-foundation","text":"The equation of motion for a pendulum with damping and an external force is given by: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] For small angles: [ \\sin(\\theta) \\approx \\theta ] This allows the analysis of damped harmonic oscillations , resonance , and even chaos by varying parameters.","title":"\ud83d\udcda Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-model-of-the-pendulum","text":"A numerical solution is obtained using the Runge-Kutta method (4th order) from the scipy.integrate.solve_ivp package. Model parameters: - \u03b3 (damping): 0.1 - \u03c9\u2080 (natural frequency): 1.5 - A (amplitude of the external force): 1.2 - \u03c9 (driving frequency): 2.0 Code can be found in the repository or below upon request.","title":"\ud83e\uddea Python Model of the Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#visualization-of-results","text":"","title":"\ud83d\udcca Visualization of Results"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-angle-vs-time","text":"","title":"1\ufe0f\u20e3 Angle vs Time"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#_1","text":"","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-phase-portrait","text":"(\u03b8 vs \u03c9 \u2014 shows the system's behavior in the state space)","title":"2\ufe0f\u20e3 Phase Portrait"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-poincare-section","text":"(Sampling the position and velocity of the pendulum at certain moments \u2014 a fractal structure appears when chaos emerges)","title":"3\ufe0f\u20e3 Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#conclusions","text":"The system demonstrates various motion regimes : regular, quasiperiodic, and chaotic. Under certain conditions, resonance occurs, increasing the amplitude. When changing parameters, chaos appears \u2014 an example of complex nonlinear dynamics.","title":"\ud83d\udccc Conclusions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#applications","text":"This model can be applied in: - engineering (vibrations, damping), - electronics (RLC circuits), - biomechanics (modeling rhythmic patterns), - energy harvesting (smoothing oscillations).","title":"\u2699\ufe0f Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#tools","text":"Python 3 NumPy , SciPy , Matplotlib Visual Studio Code Git, GitHub Pages","title":"\ud83d\udee0 Tools"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 Orbital Period and Orbital Radius \u2013 Kepler's Third Law \ud83d\udcd8 Motivation Kepler's Third Law reveals the relationship between a celestial body's orbital period and its distance from the central mass. This law not only predicts how planets and satellites move but also helps astronomers measure mass and distance across the universe. \ud83d\udcd0 Derivation of the Law (Circular Orbits) Using Newton's law of gravitation and the formula for centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Solving for orbital speed \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] Now the orbital period \\( T \\) : \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] \ud83d\udd2d Applications in Astronomy Calculate mass of planets/stars from satellite orbits Estimate distances of celestial bodies Universal law: applies to satellites, moons, planets, exoplanets, binary stars \ud83c\udf0d Example: Moon Orbit Radius \u2248 384,400 km Period \u2248 27.3 days \\( T^2 \\propto r^3 \\) holds true \ud83e\uddea Simulation in Python ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3 kg^-1 s^-2 M_earth = 5.972e24 # kg Function to compute orbital period def orbital_period(r, M=M_earth): return 2 * np.pi * np.sqrt(r**3 / (G * M)) Radii (m) radii = np.linspace(1e7, 5e8, 100) periods = orbital_period(radii) Plotting T\u00b2 vs r\u00b3 plt.figure(figsize=(8, 6)) plt.plot(radii 3, periods 2) plt.xlabel(\"Orbital Radius Cubed (r\u00b3) [m\u00b3]\") plt.ylabel(\"Orbital Period Squared (T\u00b2) [s\u00b2]\") plt.title(\"Kepler's Third Law: T\u00b2 vs r\u00b3\") plt.grid(True) plt.show()","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius-keplers-third-law","text":"","title":"Orbital Period and Orbital Radius \u2013 Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law reveals the relationship between a celestial body's orbital period and its distance from the central mass. This law not only predicts how planets and satellites move but also helps astronomers measure mass and distance across the universe.","title":"\ud83d\udcd8 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#derivation-of-the-law-circular-orbits","text":"Using Newton's law of gravitation and the formula for centripetal force: \\[ \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Solving for orbital speed \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] Now the orbital period \\( T \\) : \\[ T = \\frac{2\\pi r}{v} = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Squaring both sides: \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\]","title":"\ud83d\udcd0 Derivation of the Law (Circular Orbits)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#applications-in-astronomy","text":"Calculate mass of planets/stars from satellite orbits Estimate distances of celestial bodies Universal law: applies to satellites, moons, planets, exoplanets, binary stars","title":"\ud83d\udd2d Applications in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example-moon-orbit","text":"Radius \u2248 384,400 km Period \u2248 27.3 days \\( T^2 \\propto r^3 \\) holds true","title":"\ud83c\udf0d Example: Moon Orbit"},{"location":"1%20Physics/2%20Gravity/Problem_1/#simulation-in-python","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83e\uddea Simulation in Python"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # m^3 kg^-1 s^-2 M_earth = 5.972e24 # kg","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#function-to-compute-orbital-period","text":"def orbital_period(r, M=M_earth): return 2 * np.pi * np.sqrt(r**3 / (G * M))","title":"Function to compute orbital period"},{"location":"1%20Physics/2%20Gravity/Problem_1/#radii-m","text":"radii = np.linspace(1e7, 5e8, 100) periods = orbital_period(radii)","title":"Radii (m)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting-t2-vs-r3","text":"plt.figure(figsize=(8, 6)) plt.plot(radii 3, periods 2) plt.xlabel(\"Orbital Radius Cubed (r\u00b3) [m\u00b3]\") plt.ylabel(\"Orbital Period Squared (T\u00b2) [s\u00b2]\") plt.title(\"Kepler's Third Law: T\u00b2 vs r\u00b3\") plt.grid(True) plt.show()","title":"Plotting T\u00b2 vs r\u00b3"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Escape Velocities and Cosmic Velocities \ud83c\udf0c \ud83d\udcd8 Motivation Escape velocity determines the minimum speed required to break free from a celestial body's gravity. This idea leads to the first , second , and third cosmic velocities \u2014 critical for understanding orbits, escapes, and interplanetary missions. \ud83d\ude80 Definitions First Cosmic Velocity \u2014 Orbital velocity: speed needed to stay in a circular orbit close to the planet's surface. Second Cosmic Velocity \u2014 Escape velocity: speed needed to leave the planet's gravitational field entirely. Third Cosmic Velocity \u2014 Interplanetary escape velocity: speed needed to leave the Solar System from Earth. \ud83d\udcd0 Mathematical Derivations 1. First Cosmic Velocity \\( v_1 \\) \\[ v_1 = \\sqrt{\\frac{G M}{R}} \\] Where: - \\( G \\) = gravitational constant - \\( M \\) = mass of the planet - \\( R \\) = radius of the planet 2. Second Cosmic Velocity (Escape Velocity) \\( v_2 \\) \\[ v_2 = \\sqrt{2} \\cdot v_1 = \\sqrt{\\frac{2GM}{R}} \\] 3. Third Cosmic Velocity \\( v_3 \\) Approximated from Earth's orbit around the Sun: \\[ v_3 = \\sqrt{2} \\cdot v_{\\text{earth orbit}} \\approx 42.1 \\, \\text{km/s} \\] \ud83c\udf0d Celestial Body Parameters We'll compare Earth, Mars, and Jupiter. Body Mass (kg) Radius (m) Earth 5.972\u00d710\u00b2\u2074 6.371\u00d710\u2076 Mars 6.417\u00d710\u00b2\u00b3 3.390\u00d710\u2076 Jupiter 1.898\u00d710\u00b2\u2077 6.991\u00d710\u2077 \ud83e\uddea Python Simulation ```python import numpy as np import matplotlib.pyplot as plt Gravitational constant G = 6.67430e-11 # m^3/kg/s^2 Celestial bodies: name, mass (kg), radius (m) bodies = { \"Earth\": (5.972e24, 6.371e6), \"Mars\": (6.417e23, 3.390e6), \"Jupiter\": (1.898e27, 6.991e7), } Store results names, v1s, v2s = [], [], [] for name, (M, R) in bodies.items(): v1 = np.sqrt(G * M / R) / 1000 # First cosmic velocity [km/s] v2 = np.sqrt(2 * G * M / R) / 1000 # Second cosmic velocity [km/s] names.append(name) v1s.append(v1) v2s.append(v2) Plot x = np.arange(len(names)) width = 0.35 plt.figure(figsize=(8, 5)) plt.bar(x - width/2, v1s, width, label='1st Cosmic Velocity') plt.bar(x + width/2, v2s, width, label='2nd Cosmic Velocity') plt.xticks(x, names) plt.ylabel(\"Velocity (km/s)\") plt.title(\"Cosmic Velocities of Planets\") plt.legend() plt.grid(True, axis='y') plt.tight_layout() plt.show() import numpy as np G = 6.67430e-11 # gravitational constant [m^3 kg^-1 s^-2] M_sun = 1.989e30 # mass of the Sun [kg] R_earth_sun = 1.496e11 # average Earth-Sun distance [m] v3 = np.sqrt(2 * G * M_sun / R_earth_sun) / 1000 # [km/s] print(f\"Third Cosmic Velocity (from Earth orbit): {v3:.2f} km/s\") Third Cosmic Velocity (from Earth orbit): 42.12 km/s","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocities-and-cosmic-velocities","text":"","title":"Escape Velocities and Cosmic Velocities \ud83c\udf0c"},{"location":"1%20Physics/2%20Gravity/Problem_2/#motivation","text":"Escape velocity determines the minimum speed required to break free from a celestial body's gravity. This idea leads to the first , second , and third cosmic velocities \u2014 critical for understanding orbits, escapes, and interplanetary missions.","title":"\ud83d\udcd8 Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions","text":"First Cosmic Velocity \u2014 Orbital velocity: speed needed to stay in a circular orbit close to the planet's surface. Second Cosmic Velocity \u2014 Escape velocity: speed needed to leave the planet's gravitational field entirely. Third Cosmic Velocity \u2014 Interplanetary escape velocity: speed needed to leave the Solar System from Earth.","title":"\ud83d\ude80 Definitions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-derivations","text":"","title":"\ud83d\udcd0 Mathematical Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-first-cosmic-velocity-v_1","text":"\\[ v_1 = \\sqrt{\\frac{G M}{R}} \\] Where: - \\( G \\) = gravitational constant - \\( M \\) = mass of the planet - \\( R \\) = radius of the planet","title":"1. First Cosmic Velocity \\( v_1 \\)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-second-cosmic-velocity-escape-velocity-v_2","text":"\\[ v_2 = \\sqrt{2} \\cdot v_1 = \\sqrt{\\frac{2GM}{R}} \\]","title":"2. Second Cosmic Velocity (Escape Velocity) \\( v_2 \\)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-third-cosmic-velocity-v_3","text":"Approximated from Earth's orbit around the Sun: \\[ v_3 = \\sqrt{2} \\cdot v_{\\text{earth orbit}} \\approx 42.1 \\, \\text{km/s} \\]","title":"3. Third Cosmic Velocity \\( v_3 \\)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-body-parameters","text":"We'll compare Earth, Mars, and Jupiter. Body Mass (kg) Radius (m) Earth 5.972\u00d710\u00b2\u2074 6.371\u00d710\u2076 Mars 6.417\u00d710\u00b2\u00b3 3.390\u00d710\u2076 Jupiter 1.898\u00d710\u00b2\u2077 6.991\u00d710\u2077","title":"\ud83c\udf0d Celestial Body Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83e\uddea Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#gravitational-constant","text":"G = 6.67430e-11 # m^3/kg/s^2","title":"Gravitational constant"},{"location":"1%20Physics/2%20Gravity/Problem_2/#celestial-bodies-name-mass-kg-radius-m","text":"bodies = { \"Earth\": (5.972e24, 6.371e6), \"Mars\": (6.417e23, 3.390e6), \"Jupiter\": (1.898e27, 6.991e7), }","title":"Celestial bodies: name, mass (kg), radius (m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#store-results","text":"names, v1s, v2s = [], [], [] for name, (M, R) in bodies.items(): v1 = np.sqrt(G * M / R) / 1000 # First cosmic velocity [km/s] v2 = np.sqrt(2 * G * M / R) / 1000 # Second cosmic velocity [km/s] names.append(name) v1s.append(v1) v2s.append(v2)","title":"Store results"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plot","text":"x = np.arange(len(names)) width = 0.35 plt.figure(figsize=(8, 5)) plt.bar(x - width/2, v1s, width, label='1st Cosmic Velocity') plt.bar(x + width/2, v2s, width, label='2nd Cosmic Velocity') plt.xticks(x, names) plt.ylabel(\"Velocity (km/s)\") plt.title(\"Cosmic Velocities of Planets\") plt.legend() plt.grid(True, axis='y') plt.tight_layout() plt.show() import numpy as np G = 6.67430e-11 # gravitational constant [m^3 kg^-1 s^-2] M_sun = 1.989e30 # mass of the Sun [kg] R_earth_sun = 1.496e11 # average Earth-Sun distance [m] v3 = np.sqrt(2 * G * M_sun / R_earth_sun) / 1000 # [km/s] print(f\"Third Cosmic Velocity (from Earth orbit): {v3:.2f} km/s\") Third Cosmic Velocity (from Earth orbit): 42.12 km/s","title":"Plot"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Trajectories of a Freely Released Payload Near Earth body { font-family: Arial, sans-serif; margin: 40px; background-color: #f8f9fa; color: #333; line-height: 1.6; } h1, h2 { color: #2c3e50; } code { background: #e9ecef; padding: 2px 4px; border-radius: 4px; font-size: 90%; } pre { background-color: #e9ecef; padding: 10px; border-radius: 6px; overflow-x: auto; } Trajectories of a Freely Released Payload Near Earth 1. Motivation When a payload is released from a moving spacecraft in Earth\u2019s vicinity, the resulting path depends on the velocity vector at the moment of release. These trajectories\u2014elliptical, parabolic, or hyperbolic\u2014determine whether the object enters orbit, reenters Earth\u2019s atmosphere, or escapes Earth\u2019s gravity. Understanding these dynamics is crucial in mission planning for satellites, space stations, and deep-space probes. 2. Physical and Mathematical Background Newton's Law of Universal Gravitation: F = G * M * m / r\u00b2 Gravitational Acceleration: \u20d7a = -GM * \u20d7r / |r|\u00b3 G: Gravitational constant \u2248 6.674 \u00d7 10\u207b\u00b9\u00b9 Nm\u00b2/kg\u00b2 M: Mass of Earth \u2248 5.972 \u00d7 10\u00b2\u2074 kg r: Distance from Earth's center Total Specific Mechanical Energy: \u03b5 = v\u00b2/2 \u2212 GM/r \u03b5 < 0: Elliptical \u03b5 = 0: Parabolic \u03b5 > 0: Hyperbolic 3. Numerical Simulation of Payload Trajectories Python Simulation: import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # m^3/kg/s^2 M_earth = 5.972e24 # kg R_earth = 6.371e6 # m # Function to calculate acceleration def acceleration(r): norm_r = np.linalg.norm(r) return -G * M_earth * r / norm_r**3 # Euler's method for orbital trajectory def simulate_trajectory(r0, v0, dt=1, t_max=10000): r = r0 v = v0 positions = [r.copy()] for _ in range(int(t_max / dt)): a = acceleration(r) v += a * dt r += v * dt positions.append(r.copy()) if np.linalg.norm(r) < R_earth: break return np.array(positions) # Initial conditions altitude = 400e3 # 400 km r0 = np.array([R_earth + altitude, 0]) v_circular = np.sqrt(G * M_earth / np.linalg.norm(r0)) # Try different velocities velocity_cases = [ (\"Suborbital\", v_circular * 0.9), (\"Circular Orbit\", v_circular), (\"Elliptical Orbit\", v_circular * 1.1), (\"Escape\", np.sqrt(2) * v_circular) ] plt.figure(figsize=(10, 10)) theta = np.linspace(0, 2*np.pi, 100) plt.plot(R_earth * np.cos(theta), R_earth * np.sin(theta), 'k', label='Earth') for label, v0_mag in velocity_cases: v0 = np.array([0, v0_mag]) traj = simulate_trajectory(r0.copy(), v0.copy(), dt=1, t_max=10000) plt.plot(traj[:,0], traj[:,1], label=label) plt.axis('equal') plt.xlabel(\"x [m]\") plt.ylabel(\"y [m]\") plt.title(\"Payload Trajectories Released Near Earth\") plt.legend() plt.grid(True) plt.show() 4. Interpretation of Results Suborbital: The payload falls back to Earth, possibly reentering. Circular Orbit: The payload remains in stable orbit. Elliptical Orbit: The payload enters a higher apogee orbit. Escape Trajectory: The payload leaves Earth\u2019s gravitational field. Escape Velocity: v_esc = sqrt(2GM / r) \u2248 11.2 km/s at surface 5. Applications in Space Missions Orbital Insertion: Payloads must match circular/elliptical criteria. Reentry Capsules: Suborbital trajectories ensure atmospheric return. Interplanetary Missions: Escape trajectories enable transfers to other planets. 6. Conclusion This analysis demonstrates how classical mechanics and numerical methods provide insights into orbital dynamics. Understanding the nature of a trajectory based on velocity and position at release is fundamental in aerospace engineering and astrodynamics.","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}